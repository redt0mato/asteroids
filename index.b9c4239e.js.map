{"mappings":"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","sources":["src/objects/entity.ts","src/actions/Controller.ts","src/actions/Physics.ts","src/index.ts"],"sourcesContent":["type EntityDrawingArgumentsParams = Parameters<CanvasPath[\"arc\"]>;\n\nconst shipMaxSpeed = 1; //along both axis\n\n/**\n * Common class to store drawing and positioning an entity in Asteroids.\n *\n * @remarks\n * Eg asteroids, bullets, and the ship. Will contain power-up.\n *\n * @param x - x position on a 2D grid.\n * @param y - y position on a 2D grid.\n * @param w - width of a rectangle.\n * @param h - height of a rectangle\n * @returns An instance we can use to draw shapes\n *\n */\nexport class Entity {\n  public ctx: CanvasRenderingContext2D;\n  private _xPos: EntityDrawingArgumentsParams[0];\n  private _yPos: EntityDrawingArgumentsParams[1];\n  private _vel: [number, number];\n  public type: EntityTypes = EntityTypes.ENTITY;\n  public radius: number = 50;\n\n  public constructor(\n    ctx: CanvasRenderingContext2D,\n    xPos,\n    yPos,\n    xVelocity: number = 0,\n    yVelocity = 0\n  ) {\n    this.ctx = ctx;\n    this._xPos = xPos;\n    this._yPos = yPos;\n    this._vel = [xVelocity, yVelocity];\n  }\n  updatePosition() {\n    this.xPos += this._vel[0];\n    this.yPos += this._vel[1];\n  }\n\n  set xPos(value: number) {\n    if (value === NaN || value === undefined) {\n      throw new Error(\"tried to set NaN or undefined\");\n    }\n    this._xPos = value;\n  }\n\n  get xPos() {\n    return this._xPos;\n  }\n\n  set yPos(value: number) {\n    if (value === NaN || value === undefined) {\n      throw new Error(\"tried to set NaN or undefined\");\n    }\n    this._yPos = value;\n  }\n\n  get yPos() {\n    return this._yPos;\n  }\n\n  get vel() {\n    return this._vel;\n  }\n\n  set vel(newVel) {\n    this._vel = newVel;\n  }\n\n  draw() {\n    this.ctx.beginPath();\n    this.ctx.strokeStyle = \"red\";\n    this.ctx.arc(this.xPos, this.yPos, this.radius, 0, Math.PI);\n    this.ctx.stroke();\n\n    this.ctx.beginPath();\n    this.ctx.strokeStyle = \"blue\";\n    this.ctx.arc(this.xPos, this.yPos, this.radius, Math.PI, 2 * Math.PI);\n    this.ctx.stroke();\n  }\n}\n\nexport enum EntityTypes {\n  ASTEROID,\n  SHIP,\n  BULLET,\n  ENTITY,\n}\n\nexport class Controller {}\n\nexport enum DIRECTIONS {\n  UP,\n  DOWN,\n  LEFT,\n  RIGHT,\n}\n\nconst bulletRadius = 5;\nexport class Ship extends Entity {\n  type = EntityTypes.SHIP;\n  public radius: number = 15;\n  power(direction: DIRECTIONS) {\n    const [xVel, yVel] = this.vel;\n    let newVel: [number, number] = [xVel, yVel];\n    if (direction === DIRECTIONS.UP) {\n      newVel = [xVel, yVel - 1];\n    } else if (direction === DIRECTIONS.DOWN) {\n      newVel = [xVel, yVel + 1];\n    } else if (direction === DIRECTIONS.LEFT) {\n      newVel = [xVel - 1, yVel];\n    } else if (direction === DIRECTIONS.RIGHT) {\n      newVel = [xVel + 1, yVel];\n    }\n    this.vel = [\n      Math.abs(newVel[0]) <= 1.5\n        ? newVel[0]\n        : (newVel[0] / Math.abs(newVel[0] || 1)) * 1.5,\n      Math.abs(newVel[1]) <= 1.5\n        ? newVel[1]\n        : (newVel[1] / Math.abs(newVel[1] || 1)) * 1.5,\n    ];\n  }\n\n  fireBullet(GameWorld) {\n    if (GameWorld.getInstance().entities.indexOf(this) === -1) {\n      return;\n    }\n\n    //TO-DO do not like the casting below\n    const {\n      ctx,\n      xPos: shipXPos,\n      yPos: shipYPos,\n      vel: shipVelocity,\n      radius,\n    } = this as Ship;\n\n    //TO-DO make explicit the relationship between 3 and 1.5 see power(ship)\n    const newBullet = new Bullet(\n      ctx,\n      shipXPos +\n        2.25 * radius * (shipVelocity[0] / Math.abs(shipVelocity[0] || 1)),\n      shipYPos +\n        2.25 * radius * (shipVelocity[1] / Math.abs(shipVelocity[1] || 1)),\n      (shipVelocity[0] / Math.abs(shipVelocity[0] || 1)) * 3,\n      (shipVelocity[1] / Math.abs(shipVelocity[1] || 1)) * 3\n    );\n\n    GameWorld.getInstance().entities.push(newBullet);\n  }\n}\n\n//I wanted this to be the child class of Ship but there are no inner classes in JS atm.\nclass Bullet extends Entity {\n  type = EntityTypes.BULLET;\n  public radius: number = 5;\n}\n\nexport class Asteroid extends Entity {\n  type = EntityTypes.ASTEROID;\n  public constructor(...args) {\n    /*\n     * TO-DO\n     * following points of imprveoemtn\n     * -can we stop doing the args[0] is there a way to not have to do that/syntactical sugar at the minimum?\n     * -make the relationship between velocity of asteroid which is always lower than ship more explicit\n     * -type the constructor args to match Asteroid\n     */\n    super(args[0], args[1], args[2], Math.random() * 1.2, Math.random() * 1.2);\n  }\n}\n","/**\n * Using this file to process input streams from keyboard and/or mouse\n * We only handle up/down/left/right arrows and spacebars atm.\n *\n */\n\nimport { DIRECTIONS, Ship } from \"../objects/Entity\";\n\nexport function setupControls(shipInstance: Ship, GameWorld) {\n  document.onkeydown = function (event) {\n    if (event.keyCode === 37) {\n      shipInstance.power(DIRECTIONS.LEFT);\n    } else if (event.keyCode === 38) {\n      shipInstance.power(DIRECTIONS.UP);\n    } else if (event.keyCode === 39) {\n      shipInstance.power(DIRECTIONS.RIGHT);\n    } else if (event.keyCode === 40) {\n      shipInstance.power(DIRECTIONS.DOWN);\n    } else if (event.keyCode === 32) {\n      shipInstance.fireBullet(GameWorld);\n    }\n  };\n}\n\n//32 is spacebar keycode\n","import { Entity, EntityTypes, Ship } from \"../objects/Entity\";\n\n/*\n  Calculate distance between 2 points in 2D Cartesian coordinate system\n*/\nfunction calculateDistanceBetweenTwoPoints(\n  coords1: [number, number],\n  coords2: [number, number]\n) {\n  return Math.sqrt(\n    Math.pow(Math.abs(coords1[0] - coords2[0]), 2) +\n      Math.pow(Math.abs(coords1[1] - coords2[1]), 2)\n  );\n}\n\n/*\n  https://happycoding.io/tutorials/processing/collision-detection\n*/\ntype DoCirclesCollideArgs = [\n  Parameters<typeof calculateDistanceBetweenTwoPoints>[0],\n  Parameters<typeof calculateDistanceBetweenTwoPoints>[1],\n  number,\n  number\n];\n\n/*\n  Closed form solution for determining if two circles intersect\n*/\nfunction doCirclesCollide(...args: DoCirclesCollideArgs) {\n  //Pythagorean Theorem\n  const [coords1, coords2, radius1, radius2] = args;\n  return (\n    calculateDistanceBetweenTwoPoints(coords1, coords2) < radius1 + radius2\n  );\n}\nexport function calculatePhysics(GameWorld) {\n  /*\n    GameWorldSingleton\n    This is a N^2 approach if we iterate over number of objects.\n\n    We should improve this.\n  */\n\n  const entitiesArray = GameWorld.getInstance().entities;\n\n  let entity1, entity2;\n\n  for (let i = 0; i < entitiesArray.length; i++) {\n    for (let j = i + 1; j < entitiesArray.length; j++) {\n      entity1 = entitiesArray[i];\n      entity2 = entitiesArray[j];\n      if (\n        entity1.type !== entity2.type &&\n        doCirclesCollide(\n          [entity1.xPos, entity1.yPos],\n          [entity2.xPos, entity2.yPos],\n          entity1.radius,\n          entity2.radius\n        )\n      ) {\n        //remove\n        const oldEntitiesArray = GameWorld.getInstance().entities;\n\n        let newArray = oldEntitiesArray.slice(0, i);\n\n        newArray = newArray\n          .concat(oldEntitiesArray.slice(i + 1, j))\n          .concat(oldEntitiesArray.slice(j + 1));\n\n        GameWorld.getInstance().entities = newArray;\n      } else {\n        console.log(\"nothing collided\");\n      }\n    }\n  }\n  //Possible improvement hard to infer what the argument should be without looking at the code\n  // const [ship, asteroid] = GameWorld.getInstance().entities as [Ship, Entity];\n\n  //TO-DO Remove radius magic number and update. Put it on the entity instance\n}\n","import { Asteroid, Entity, Ship } from \"./objects/Entity\";\nimport { setupControls } from \"./actions/Controller\";\nimport { calculatePhysics } from \"./actions/Physics\";\n\nconst canvas = document.getElementsByTagName(\"canvas\")[0];\n\nvar ctx = canvas.getContext(\"2d\");\nconsole.log(\"running\");\n//TO-DO update type definitions more\nclass GameWorld {\n  private static _instance: GameWorld = new GameWorld(ctx);\n  public entities: Entity[] = [];\n  private ctx: CanvasRenderingContext2D;\n  public maximumSpeed = 1; //This is for both the x-y direction\n  public isGameRunning = true;\n\n  private constructor(ctx) {\n    if (GameWorld._instance) {\n      throw new Error(\n        \"Error: Instantiation failed: Use GameWorld.getInstance() instead of new.\"\n      );\n    }\n    //TO-DO move initialize game state to another function so I can start/spawn a new game\n\n    //Initialize the internal game state\n    GameWorld._instance = this;\n\n    const { height, width } = document.getElementsByTagName(\"canvas\")[0];\n    const shipInstance = new Ship(ctx, width / 2, height / 2, 0, 0);\n    this.ctx = ctx;\n\n    GameWorld._instance.entities = [shipInstance];\n    //TO-DO generate random spawn points for asteroid\n    for (let i = 0; i < 5; i++) {\n      GameWorld._instance.entities.push(\n        new Asteroid(\n          ctx,\n          Math.random() * canvas.width,\n          Math.random() * canvas.height\n        )\n      );\n    }\n\n    setupControls(shipInstance, GameWorld);\n\n    const startButton = document.getElementById(\"startButton\");\n    const stopButton = document.getElementById(\"stopButton\");\n\n    if (startButton) {\n      startButton.addEventListener(\"click\", () => {\n        GameWorld._instance.isGameRunning = true;\n        requestAnimationFrame(GameWorld._instance.requestGameAnimationFrame);\n      });\n    }\n\n    if (stopButton) {\n      stopButton.addEventListener(\"click\", () => {\n        GameWorld._instance.isGameRunning = false;\n        GameWorld._instance.ctx.clearRect(0, 0, canvas.width, canvas.height);\n      });\n    }\n  }\n\n  public static getInstance(): GameWorld {\n    if (!GameWorld._instance) {\n      GameWorld._instance = new GameWorld(ctx);\n    }\n    return GameWorld._instance;\n  }\n\n  public checkIfOutOfBounds(entity) {\n    //TO-DO below is size\n    if (entity.xPos < -50) {\n      entity.xPos = 770;\n    } else if (entity.xPos > 770) {\n      entity.xPos = -50;\n    }\n\n    if (entity.yPos < -50) {\n      entity.yPos = 850;\n    } else if (entity.yPos > 850) {\n      entity.yPos = -50;\n    }\n    return true;\n  }\n\n  public updatePositionOfEntity(entity) {}\n\n  //really drawing the next frame\n  public drawMap() {\n    //detect if anything out-of-bounds\n    //translate it on a mirror\n    //POC only teleport from bottom-to-top\n    //if upper thing is above then teleport\n    GameWorld._instance.ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    GameWorld._instance.entities.forEach((entity) => {\n      GameWorld._instance.checkIfOutOfBounds(entity);\n      entity.draw();\n      entity.updatePosition();\n    });\n    //visual portion\n\n    //Request below after x-y and other drawing information is finished\n    // requestAnimationFrame(GameWorld._instance.drawMap);\n  }\n  public requestGameAnimationFrame() {\n    if (GameWorld._instance.isGameRunning !== true) {\n      return;\n    }\n\n    calculatePhysics(GameWorld);\n\n    //calculate nextMapFrame\n    GameWorld._instance.drawMap();\n    requestAnimationFrame(GameWorld._instance.requestGameAnimationFrame);\n  }\n}\n\nconst GameWorldSingleton = GameWorld.getInstance();\n"],"names":["$b8a837f44fbb3ba7$var$EntityTypes","EntityTypes","$b8a837f44fbb3ba7$var$Entity","Entity","ctx","xPos","yPos","xVelocity","yVelocity","this","type","ENTITY","radius","_xPos","_yPos","_vel","prototype","updatePosition","Object","defineProperty","get","set","value","undefined","Error","newVel","draw","beginPath","strokeStyle","arc","Math","PI","stroke","$b8a837f44fbb3ba7$exports","$b8a837f44fbb3ba7$var$DIRECTIONS","DIRECTIONS","$b8a837f44fbb3ba7$var$Controller","Controller","$b8a837f44fbb3ba7$var$Ship","_super","Ship","_this","apply","arguments","SHIP","$b8a837f44fbb3ba7$var$__extends","power","direction","_a","vel","xVel","yVel","UP","DOWN","LEFT","RIGHT","abs","fireBullet","GameWorld","getInstance","entities","indexOf","shipXPos","shipYPos","shipVelocity","newBullet","$b8a837f44fbb3ba7$var$Bullet","push","Bullet","BULLET","$b8a837f44fbb3ba7$var$Asteroid","Asteroid","args","_i","length","call","random","ASTEROID","$1fbb2f51310f24af$exports","setupControls","shipInstance","document","onkeydown","event","keyCode","$8ed43b1f49bff9c6$var$calculateDistanceBetweenTwoPoints","coords1","coords2","sqrt","pow","$8ed43b1f49bff9c6$var$doCirclesCollide","radius1","radius2","$8ed43b1f49bff9c6$exports","calculatePhysics","entity1","entity2","entitiesArray","i","j","oldEntitiesArray","newArray","slice","concat","console","log","$bb7131de8fd96889$var$canvas","getElementsByTagName","$bb7131de8fd96889$var$ctx","getContext","maximumSpeed","isGameRunning","_instance","height","width","startButton","getElementById","stopButton","addEventListener","requestAnimationFrame","requestGameAnimationFrame","clearRect","checkIfOutOfBounds","entity","updatePositionOfEntity","drawMap","forEach"],"version":3,"file":"index.b9c4239e.js.map"}
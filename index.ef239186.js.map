{"mappings":"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","sources":["src/objects/Entity.ts","src/actions/Controller.ts","src/actions/Physics.ts","src/index.ts"],"sourcesContent":["type EntityDrawingArgumentsParams = Parameters<CanvasPath[\"arc\"]>;\n\nconst shipMaxSpeed = 1; //along both axis\n\n/**\n * Common class to store drawing and positioning an entity in Asteroids.\n * @constructor\n * @remarks\n * Eg asteroids, bullets, and the ship. The ship is actually a circle.\n *\n * @param xPos - x position on a 2D grid.\n * @param yPos - y position on a 2D grid.\n * @param xVelocity - x-velocity on a 2d grid.\n * @param yVelocity - y-velocity on a 2d grid.\n * @returns An instance we can use to draw shapes\n *\n */\nexport class Entity {\n  private _xPos: EntityDrawingArgumentsParams[0];\n  private _yPos: EntityDrawingArgumentsParams[1];\n  private _vel: [number, number];\n  public type: EntityTypes = EntityTypes.ENTITY;\n  public radius: number = 50;\n\n  public constructor(\n    public ctx: CanvasRenderingContext2D,\n    xPos,\n    yPos,\n    xVelocity: number = 0,\n    yVelocity = 0\n  ) {\n    this.ctx = ctx;\n    this._xPos = xPos;\n    this._yPos = yPos;\n    this._vel = [xVelocity, yVelocity];\n  }\n  updatePosition() {\n    this.xPos += this._vel[0];\n    this.yPos += this._vel[1];\n  }\n\n  set xPos(value: number) {\n    if (value === NaN || value === undefined) {\n      throw new Error(\"tried to set NaN or undefined\");\n    }\n    let test: number;\n\n    this._xPos = value;\n  }\n\n  get xPos() {\n    return this._xPos;\n  }\n\n  set yPos(value: number) {\n    if (value === NaN || value === undefined) {\n      throw new Error(\"tried to set NaN or undefined\");\n    }\n    this._yPos = value;\n  }\n\n  get yPos() {\n    return this._yPos;\n  }\n\n  get vel() {\n    return this._vel;\n  }\n\n  set vel(newVel) {\n    this._vel = newVel;\n  }\n\n  draw() {\n    this.ctx.beginPath();\n    this.ctx.strokeStyle = \"red\";\n    this.ctx.arc(this.xPos, this.yPos, this.radius, 0, Math.PI);\n    this.ctx.stroke();\n\n    this.ctx.beginPath();\n    this.ctx.strokeStyle = \"blue\";\n    this.ctx.arc(this.xPos, this.yPos, this.radius, Math.PI, 2 * Math.PI);\n    this.ctx.stroke();\n  }\n}\n\nexport enum EntityTypes {\n  ASTEROID,\n  SHIP,\n  BULLET,\n  ENTITY,\n}\n\nexport class Controller {}\n\nexport enum DIRECTIONS {\n  UP,\n  DOWN,\n  LEFT,\n  RIGHT,\n}\n\nconst bulletRadius = 5;\n\n/**\n * Constructor\n * @augments Entity\n * Ship class to store logic for player-controlled ship.\n * Currently there should ONLY be one in the game world instance.\n *\n * @remarks\n * This is the only object that the player can control. They can use it to fire bullets.\n *\n * @param x - x position on a 2D grid.\n * @param y - y position on a 2D grid.\n * @param w - width of a rectangle.\n * @param h - height of a rectangle\n * @returns An instance we can use to draw shapes\n *\n */\nexport class Ship extends Entity {\n  type = EntityTypes.SHIP;\n  public radius: number = 15;\n  power(direction: DIRECTIONS) {\n    const [xVel, yVel] = this.vel;\n    let newVel: [number, number] = [xVel, yVel];\n    if (direction === DIRECTIONS.UP) {\n      newVel = [xVel, yVel - 1];\n    } else if (direction === DIRECTIONS.DOWN) {\n      newVel = [xVel, yVel + 1];\n    } else if (direction === DIRECTIONS.LEFT) {\n      newVel = [xVel - 1, yVel];\n    } else if (direction === DIRECTIONS.RIGHT) {\n      newVel = [xVel + 1, yVel];\n    }\n    this.vel = [\n      Math.abs(newVel[0]) <= 1.5\n        ? newVel[0]\n        : (newVel[0] / Math.abs(newVel[0] || 1)) * 1.5,\n      Math.abs(newVel[1]) <= 1.5\n        ? newVel[1]\n        : (newVel[1] / Math.abs(newVel[1] || 1)) * 1.5,\n    ];\n  }\n\n  fireBullet(GameWorld) {\n    if (GameWorld.getInstance().entities.indexOf(this) === -1) {\n      return;\n    }\n\n    //TO-DO do not like the casting below\n    const {\n      ctx,\n      xPos: shipXPos,\n      yPos: shipYPos,\n      vel: shipVelocity,\n      radius,\n    } = this as Ship;\n\n    //TO-DO make explicit the relationship between 3 and 1.5 see power(ship)\n    const newBullet = new Bullet(\n      ctx,\n      shipXPos +\n        2.25 * radius * (shipVelocity[0] / Math.abs(shipVelocity[0] || 1)),\n      shipYPos +\n        2.25 * radius * (shipVelocity[1] / Math.abs(shipVelocity[1] || 1)),\n      (shipVelocity[0] / Math.abs(shipVelocity[0] || 1)) * 3,\n      (shipVelocity[1] / Math.abs(shipVelocity[1] || 1)) * 3\n    );\n\n    const a = new Set([\"hi\"]);\n    GameWorld.getInstance().entities.push(newBullet);\n  }\n}\n\n//I wanted this to be the child class of Ship but there are no inner classes in JS atm.\nclass Bullet extends Entity {\n  type = EntityTypes.BULLET;\n  public radius: number = 5;\n}\n\nexport class Asteroid extends Entity {\n  type = EntityTypes.ASTEROID;\n  public constructor(...args) {\n    /*\n     * TO-DO\n     * following points of imprveoemtn\n     * -can we stop doing the args[0] is there a way to not have to do that/syntactical sugar at the minimum?\n     * -make the relationship between velocity of asteroid which is always lower than ship more explicit\n     * -type the constructor args to match Asteroid\n     */\n    super(args[0], args[1], args[2], Math.random() * 1.2, Math.random() * 1.2);\n  }\n}\n","/**\n * Using this file to process input streams from keyboard and/or mouse\n * We only handle up/down/left/right arrows and spacebars atm.\n *\n */\n\nimport { DIRECTIONS, Ship } from \"../objects/Entity\";\n\nexport function setupControls(shipInstance: Ship, GameWorld) {\n  document.onkeydown = function (event) {\n    if (event.keyCode === 37) {\n      shipInstance.power(DIRECTIONS.LEFT);\n    } else if (event.keyCode === 38) {\n      shipInstance.power(DIRECTIONS.UP);\n    } else if (event.keyCode === 39) {\n      shipInstance.power(DIRECTIONS.RIGHT);\n    } else if (event.keyCode === 40) {\n      shipInstance.power(DIRECTIONS.DOWN);\n    } else if (event.keyCode === 32) {\n      shipInstance.fireBullet(GameWorld);\n    }\n  };\n}\n\n//32 is spacebar keycode\n","import { Entity, EntityTypes, Ship } from \"../objects/Entity\";\nimport { GameWorld } from \"../index\";\n/*\n  Calculate distance between 2 points in 2D Cartesian coordinate system\n*/\nfunction calculateDistanceBetweenTwoPoints(\n  coords1: [number, number],\n  coords2: [number, number]\n): number {\n  return Math.sqrt(\n    Math.pow(Math.abs(coords1[0] - coords2[0]), 2) +\n      Math.pow(Math.abs(coords1[1] - coords2[1]), 2)\n  );\n}\n\n/*\n  https://happycoding.io/tutorials/processing/collision-detection\n*/\ntype DoCirclesCollideArgs = [\n  Parameters<typeof calculateDistanceBetweenTwoPoints>[0],\n  Parameters<typeof calculateDistanceBetweenTwoPoints>[1],\n  number,\n  number\n];\n\n/*\n  Closed form solution for determining if two circles intersect\n*/\nfunction doCirclesCollide(...args: DoCirclesCollideArgs): boolean {\n  //Pythagorean Theorem\n  const [coords1, coords2, radius1, radius2] = args;\n  return (\n    calculateDistanceBetweenTwoPoints(coords1, coords2) < radius1 + radius2\n  );\n}\nexport function calculatePhysics(arg: GameWorld) {\n  /*\n    GameWorldSingleton\n    This is a N^2 approach if we iterate over number of objects.\n\n    We should improve this.\n  */\n\n  const entitiesArray = arg.entities;\n\n  let entity1, entity2;\n\n  for (let i = 0; i < entitiesArray.length; i++) {\n    for (let j = i + 1; j < entitiesArray.length; j++) {\n      entity1 = entitiesArray[i];\n      entity2 = entitiesArray[j];\n      if (\n        entity1.type !== entity2.type &&\n        doCirclesCollide(\n          [entity1.xPos, entity1.yPos],\n          [entity2.xPos, entity2.yPos],\n          entity1.radius,\n          entity2.radius\n        )\n      ) {\n        //remove\n        const oldEntitiesArray = GameWorld.getInstance().entities;\n\n        let newArray = oldEntitiesArray.slice(0, i);\n\n        newArray = newArray\n          .concat(oldEntitiesArray.slice(i + 1, j))\n          .concat(oldEntitiesArray.slice(j + 1));\n\n        GameWorld.getInstance().entities = newArray;\n      } else {\n        console.log(\"nothing collided\");\n      }\n    }\n  }\n  //Possible improvement hard to infer what the argument should be without looking at the code\n  const [ship, asteroid] = GameWorld.getInstance().entities as [Ship, Entity];\n\n  //TO-DO Remove radius magic number and update. Put it on the entity instance\n}\n","import { Asteroid, Entity, Ship } from \"./objects/Entity\";\nimport { setupControls } from \"./actions/Controller\";\nimport { calculatePhysics } from \"./actions/Physics\";\n\nconst canvas = document.getElementsByTagName(\"canvas\")[0];\n\nvar ctx = canvas.getContext(\"2d\");\n//TO-DO update type definitions more\nexport class GameWorld {\n  private static _instance: GameWorld = new GameWorld(ctx); //Note it's sort of jank to initialize this because IMO we dependon the closure formed\n  // from the function it should be loaded in explicitly\n  private static _instance2: any = console.log(\"third\");\n  public entities: Entity[] = [];\n  private ctx: CanvasRenderingContext2D;\n  public maximumSpeed = 1; //This is for both the x-y direction\n  public isGameRunning = true;\n\n  private constructor(ctx) {\n    if (GameWorld._instance) {\n      throw new Error(\n        \"Error: Instantiation failed: Use GameWorld.getInstance() instead of new.\"\n      );\n    }\n\n    //Initialize the internal game state\n    GameWorld._instance = this;\n\n    //TO-DO move the set-up of asteroids and ships to their own parts\n    const { height, width } = document.getElementsByTagName(\"canvas\")[0];\n    const shipInstance = new Ship(ctx, width / 2, height / 2, 0, 0);\n    this.ctx = ctx;\n\n    GameWorld._instance.entities = [shipInstance];\n\n    for (let i = 0; i < 5; i++) {\n      GameWorld._instance.entities.push(\n        new Asteroid(\n          ctx,\n          Math.random() * canvas.width,\n          Math.random() * canvas.height\n        )\n      );\n    }\n\n    //TO-DO move set-up controls to their own parts\n    setupControls(shipInstance, GameWorld);\n\n    const startButton = document.getElementById(\"startButton\");\n    const stopButton = document.getElementById(\"stopButton\");\n\n    if (startButton) {\n      startButton.addEventListener(\"click\", () => {\n        GameWorld._instance.isGameRunning = true;\n        requestAnimationFrame(GameWorld._instance.requestGameAnimationFrame);\n      });\n    }\n\n    if (stopButton) {\n      stopButton.addEventListener(\"click\", () => {\n        GameWorld._instance.isGameRunning = false;\n        GameWorld._instance.ctx.clearRect(0, 0, canvas.width, canvas.height);\n      });\n    }\n  }\n\n  public static getInstance(): GameWorld {\n    console.log(\"fourth\");\n    if (!GameWorld._instance) {\n      GameWorld._instance = new GameWorld(ctx);\n    }\n    return GameWorld._instance;\n  }\n\n  public checkIfOutOfBounds(entity: Entity) {\n    //TO-DO below is size\n    if (entity.xPos < -50) {\n      entity.xPos = 770;\n    } else if (entity.xPos > 770) {\n      entity.xPos = -50;\n    }\n\n    if (entity.yPos < -50) {\n      entity.yPos = 850;\n    } else if (entity.yPos > 850) {\n      entity.yPos = -50;\n    }\n    return true;\n  }\n\n  public updatePositionOfEntity(entity) {}\n\n  //really drawing the next frame\n  public drawMap() {\n    //detect if anything out-of-bounds\n    //translate it on a mirror\n    //POC only teleport from bottom-to-top\n    //if upper thing is above then teleport\n    GameWorld._instance.ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    GameWorld._instance.entities.forEach((entity) => {\n      GameWorld._instance.checkIfOutOfBounds(entity);\n      entity.draw();\n      entity.updatePosition();\n    });\n    //visual portion\n\n    //Request below after x-y and other drawing information is finished\n    // requestAnimationFrame(GameWorld._instance.drawMap);\n  }\n  public requestGameAnimationFrame() {\n    if (GameWorld._instance.isGameRunning !== true) {\n      return;\n    }\n\n    calculatePhysics(GameWorld._instance);\n\n    //calculate nextMapFrame\n    GameWorld._instance.drawMap();\n    requestAnimationFrame(GameWorld._instance.requestGameAnimationFrame);\n  }\n}\n\nconst GameWorldSingleton = GameWorld.getInstance();\n"],"names":["$ac98628ac1704d1f$export$bc644a473284d944","constructor","ctx","xPos","yPos","xVelocity","yVelocity","this","type","$ac98628ac1704d1f$export$ede76e7dc512924d","ENTITY","radius","_xPos","_yPos","_vel","updatePosition","value","undefined","Error","vel","newVel","draw","beginPath","strokeStyle","arc","Math","PI","stroke","EntityTypes","$ac98628ac1704d1f$export$4aabe0d20c9c03b3","DIRECTIONS","$ac98628ac1704d1f$export$7930c61d9b464618","SHIP","power","direction","xVel","yVel","UP","DOWN","LEFT","RIGHT","abs","fireBullet","GameWorld","getInstance","entities","indexOf","shipXPos","shipYPos","shipVelocity","newBullet","$ac98628ac1704d1f$var$Bullet","Set","push","BULLET","$ac98628ac1704d1f$export$eebe4bf1f7c9e319","args","super","random","ASTEROID","$1fbb2f51310f24af$export$d3b63962eb93dd2c","shipInstance","document","onkeydown","event","keyCode","$8ed43b1f49bff9c6$var$doCirclesCollide","coords1","coords2","radius1","radius2","sqrt","pow","$8ed43b1f49bff9c6$var$calculateDistanceBetweenTwoPoints","$8ed43b1f49bff9c6$export$a12ce9deca92a933","arg","entitiesArray","entity1","entity2","i","length","j","oldEntitiesArray","$bb7131de8fd96889$export$ee56166dca92a526","newArray","slice","concat","console","log","ship","asteroid","$bb7131de8fd96889$var$canvas","getElementsByTagName","$bb7131de8fd96889$var$ctx","getContext","maximumSpeed","isGameRunning","_instance","height","width","startButton","getElementById","stopButton","addEventListener","requestAnimationFrame","requestGameAnimationFrame","clearRect","static","checkIfOutOfBounds","entity","updatePositionOfEntity","drawMap","forEach","_instance2"],"version":3,"file":"index.ef239186.js.map"}
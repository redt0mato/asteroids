{"mappings":"AAAA,IAEIA,EAFWC,SAASC,qBAAqB,UAAU,GAEtCC,WAAW,MAwCtBC,EAAoB,IApB1B,oBAAAC,IAAA,CAkBA,OAVEA,EAAAC,UAAAC,KAAA,WACEP,EAAIQ,YACJR,EAAIS,IAAI,IAAK,GAAI,GAAI,EAAG,EAAIC,KAAKC,IACjCX,EAAIY,Q,EAORP,C,CAlBA,IAsBAD,EAAkBS,IAAMb,EACxBI,EAAkBU,EAAI,GACtBV,EAAkBW,EAAI,GACtBX,EAAkBY,MAAO,GACzBZ,EAAkBa,OAAQ,GAE1Bb,EAAkBG,QAGlB,WAIE,SAAAW,IACE,GAAGA,EAAUC,UACX,MAAM,IAAIC,MAAM,4EAElBF,EAAUC,UAAYE,I,CAkB1B,OAfgBH,EAAAI,YAAd,WAII,OAHKJ,EAAUC,YACXD,EAAUC,UAAY,IAAID,GAEvBA,EAAUC,S,EAGdD,EAAAZ,UAAAiB,gBAAP,WAEIC,QAAQC,IAAI,Y,EAGTP,EAAAZ,UAAAoB,QAAP,WAAO,EArBQR,EAAAC,UAAuB,IAAID,EAwB5CA,C,EA1BA,GA4BqCI","sources":["src/index.ts"],"sourcesContent":["const canvas = document.getElementsByTagName('canvas')[0];\n\nvar ctx = canvas.getContext(\"2d\");\n/*\n  This is how we draw the entity and to use types to make explicit the relationship\n*/\ntype EntityDrawingArgumentsParams = Parameters<typeof ctx.rect>\n\n\n/**\n * Common class to store drawing and positioning an entity in Asteroids. \n *\n * @remarks\n * Eg asteroids, bullets, and the ship. Will contain power-up. \n *\n * @param x - x position on a 2D grid.\n * @param y - y position on a 2D grid.\n * @param w - width of a rectangle.\n * @param h - height of a rectangle\n * @returns An instance we can use to draw shapes\n *\n */\nclass Entity {\n\n  ctx: typeof ctx;\n  x: EntityDrawingArgumentsParams[0];\n  y: EntityDrawingArgumentsParams[1];\n  width: EntityDrawingArgumentsParams[2];\n  height: EntityDrawingArgumentsParams[3];\n  \n  draw() {\n    ctx.beginPath();\n    ctx.arc(100, 75, 50, 0, 2 * Math.PI);\n    ctx.stroke();\n    // ctx.rect(this.x, this.y, this.width, this.height);\n    // ctx.fillStyle = \"#FF0000\";\n    // ctx.fill();\n    // ctx.closePath();\n\n  }\n}\n\nconst newEntityInstance = new Entity();\n \nnewEntityInstance.ctx = ctx;\nnewEntityInstance.x = 20;\nnewEntityInstance.y = 40;\nnewEntityInstance.width= 50;\nnewEntityInstance.height= 50;\n\nnewEntityInstance.draw();\n\n\nclass GameWorld {\n\n  private static _instance: GameWorld = new GameWorld();\n\n  private constructor() {\n    if(GameWorld._instance){\n      throw new Error(\"Error: Instantiation failed: Use GameWorld.getInstance() instead of new.\");\n    }\n    GameWorld._instance = this;\n  }\n\n  public static getInstance(): GameWorld {\n      if (!GameWorld._instance) {\n          GameWorld._instance = new GameWorld();\n      }\n      return GameWorld._instance;\n  }\n\n  public updateGameLogic() {\n    //not visual portion\n      console.log(\"my logic!\");\n  }\n\n  public drawMap() {\n    //visual portion\n  }\n}\n\nconst GameWorldSingleton = GameWorld.getInstance();"],"names":["$bb7131de8fd96889$var$ctx","document","getElementsByTagName","getContext","$bb7131de8fd96889$var$newEntityInstance","Entity","prototype","draw","beginPath","arc","Math","PI","stroke","ctx","x","y","width","height","GameWorld","_instance","Error","this","getInstance","updateGameLogic","console","log","drawMap"],"version":3,"file":"index.c79970f0.js.map"}